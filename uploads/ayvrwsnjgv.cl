; Chapter 5 of The Little Schemer:; *Oh My Gawd*: It's Full of Stars;; Code examples assemled by Peteris Krumins (peter@catonmat.net).; His blog is at http://www.catonmat.net  --  good coders code, great reuse.;; Get yourself this wonderful book at Amazon: http://bit.ly/4GjWdP;; The atom? primitive;(define atom? (lambda (x)    (and (not (pair? x)) (not (null? x))))); The add1 primitive;(define add1  (lambda (n) (+ n 1))); The rember* function removes all matching atoms from an s-expression;(define rember*  (lambda (a l)    (cond      ((null? l) '())      ((atom? (car l))       (cond         ((eq? (car l) a)          (rember* a (cdr l)))         (else           (cons (car l) (rember* a (cdr l))))))      (else        (cons (rember* a (car l)) (rember* a (cdr l)))))))(rember*  'cup  '((coffee) cup ((tea) cup) (and (hick)) cup));==> '((coffee) ((tea)) (and (hick)))(rember*  'sauce  '(((tomato sauce)) ((bean) sauce) (and ((flying)) sauce)));==> '(((tomato)) ((bean)) (and ((flying)))); The insertR* function insers new to the right of all olds in l;(define insertR*  (lambda (new old l)    (cond      ((null? l) '())      ((atom? (car l))       (cond         ((eq? (car l) old)          (cons old (cons new (insertR* new old (cdr l)))))         (else           (cons (car l) (insertR* new old (cdr l))))))      (else        (cons (insertR* new old (car l)) (insertR* new old (cdr l)))))))(insertR*  'roast  'chuck  '((how much (wood)) could ((a (wood) chuck)) (((chuck)))    (if (a) ((wood chuck))) could chuck wood)); ==> ((how much (wood)) could ((a (wood) chuck roast)) (((chuck roast)));      (if (a) ((wood chuck roast))) could chuck roast wood);;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                                                            ;; The first commandment (final version)                                      ;;                                                                            ;; When recurring on a list of atoms, lat, ask two questions about it:        ;; (null? lat) and else.                                                      ;; When recurring on a number, n, ask two questions about it: (zero? n) and   ;; else.                                                                      ;; When recurring on a list of S-expressions, l, ask three questions about    ;; it: (null? l), (atom? (car l)), and else.                                  ;;                                                                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;                                                                            ;; The fourth commandment (final version)                                     ;;                                                                            ;; Always change at least one argument while recurring. When recurring on a   ;; list of atoms, lat, use (cdr l). When recurring on a number, n, use        ;; (sub1 n). And when recurring on a list of S-expressions, l, use (car l)    ;; and (cdr l) if neither (null? l) nor (atom? (car l)) are true.             ;;                                                                            ;; It must be changed to be closer to termination. The changing argument must ;; be tested in the termination condition:                                    ;; * when using cdr, test the termination with null? and                      ;; * when using sub1, test termination with zero?.                            ;;                                                                            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; The occur* function counts the number of occurances of an atom in l;(define occur*  (lambda (a l)    (cond      ((null? l) 0)      ((atom? (car l))       (cond         ((eq? (car l) a)          (add1 (occur* a (cdr l))))         (else           (occur* a (cdr l)))))      (else        (+ (occur* a (car l))           (occur* a (cdr l)))))))(occur*  'banana  '((banana)    (split ((((banana ice)))            (cream (banana))            sherbet))    (banana)    (bread)    (banana brandy)));==> 5; The subst* function substitutes all olds for news in l;(define subst*  (lambda (new old l)    (cond      ((null? l) '())      ((atom? (car l))       (cond         ((eq? (car l) old)          (cons new (subst* new old (cdr l))))         (else           (cons (car l) (subst* new old (cdr l))))))      (else        (cons (subst* new old (car l)) (subst* new old (cdr l)))))))