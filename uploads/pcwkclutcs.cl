; Chapter 8 of The Little Schemer:; Lambda the Ultimate;; Code examples assemled by Peteris Krumins (peter@catonmat.net).; His blog is at http://www.catonmat.net  --  good coders code, great reuse.;; Get yourself this wonderful book at Amazon: http://bit.ly/4GjWdP;; The atom? primitive;(define atom? (lambda (x)    (and (not (pair? x)) (not (null? x))))); The rember-f function takes the test function, element, and a list; and removes the element that test true;(define rember-f  (lambda (test? a l)    (cond      ((null? l) '())      ((test? (car l) a) (cdr l))      (else        (cons (car l) (rember-f test? a (cdr l)))))))(rember-f eq? 2 '(1 2 3 4 5)); ==> '(1 3 4 5); The eq?-c function takes an atom and returns a function that; takes an atom and tests if they are the same;(define eq?-c  (lambda (a)    (lambda (x)      (eq? a x))))((eq?-c 'tuna) 'tuna)       ; #t((eq?-c 'tuna) 'salad)      ; #f(define eq?-salad (eq?-c 'salad))